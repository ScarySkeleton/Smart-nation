// <auto-generated />
using BookSender.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace BookSender.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20171028114532_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookSender.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AmazonId");

                    b.Property<string>("Author");

                    b.Property<int?>("ConributorId");

                    b.Property<int?>("ContributorId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int?>("CurrentUserId");

                    b.Property<string>("Description");

                    b.Property<int?>("GenreId");

                    b.Property<string>("ISBN");

                    b.Property<bool>("IsUsable");

                    b.Property<int?>("PictureId");

                    b.Property<int?>("Price");

                    b.Property<DateTime>("PrintedOn");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ContributorId");

                    b.HasIndex("CurrentUserId");

                    b.HasIndex("GenreId");

                    b.HasIndex("PictureId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookSender.Models.BookHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BookId");

                    b.Property<DateTime>("GetBookOn");

                    b.Property<DateTime>("GiveBookOn");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BookHistoryRecord");
                });

            modelBuilder.Entity("BookSender.Models.Deal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AcceptorId");

                    b.Property<int?>("BookId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int?>("DealStatusId");

                    b.Property<int?>("DonorId");

                    b.Property<DateTime>("EndedOn");

                    b.Property<DateTime>("ExpiredOn");

                    b.Property<DateTime>("ModifiedOn");

                    b.HasKey("Id");

                    b.HasIndex("AcceptorId");

                    b.HasIndex("BookId");

                    b.HasIndex("DealStatusId");

                    b.HasIndex("DonorId");

                    b.ToTable("Deals");
                });

            modelBuilder.Entity("BookSender.Models.DealStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExpirationTime");

                    b.Property<int>("Name");

                    b.HasKey("Id");

                    b.ToTable("DealStatuses");
                });

            modelBuilder.Entity("BookSender.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("BookSender.Models.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentType");

                    b.Property<byte[]>("ImageData");

                    b.Property<int>("Length");

                    b.Property<string>("Name");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("BookSender.Models.RatingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DemandMinNumberBooksAdded");

                    b.Property<int>("DemandMinNumberBooksGot");

                    b.Property<string>("Name");

                    b.Property<int>("OrderNumber");

                    b.HasKey("Id");

                    b.ToTable("RatingStatuses");
                });

            modelBuilder.Entity("BookSender.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CommentorId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Text");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CommentorId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("BookSender.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BookSender.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AvailableFrom");

                    b.Property<DateTime>("AvailableTill");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("PasswordConfirmation");

                    b.Property<int?>("PictureId");

                    b.Property<int?>("RatingStatusId");

                    b.Property<DateTime>("RegisteredOn");

                    b.Property<int?>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("PictureId");

                    b.HasIndex("RatingStatusId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BookSender.Models.Book", b =>
                {
                    b.HasOne("BookSender.Models.User", "Contributor")
                        .WithMany("AddedBooks")
                        .HasForeignKey("ContributorId");

                    b.HasOne("BookSender.Models.User", "CurrentUser")
                        .WithMany("Books")
                        .HasForeignKey("CurrentUserId");

                    b.HasOne("BookSender.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId");

                    b.HasOne("BookSender.Models.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");
                });

            modelBuilder.Entity("BookSender.Models.BookHistory", b =>
                {
                    b.HasOne("BookSender.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId");

                    b.HasOne("BookSender.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BookSender.Models.Deal", b =>
                {
                    b.HasOne("BookSender.Models.User", "Acceptor")
                        .WithMany("DealsAsAcceptor")
                        .HasForeignKey("AcceptorId");

                    b.HasOne("BookSender.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId");

                    b.HasOne("BookSender.Models.DealStatus", "DealStatus")
                        .WithMany()
                        .HasForeignKey("DealStatusId");

                    b.HasOne("BookSender.Models.User", "Donor")
                        .WithMany("DealsAsDonor")
                        .HasForeignKey("DonorId");
                });

            modelBuilder.Entity("BookSender.Models.Review", b =>
                {
                    b.HasOne("BookSender.Models.User", "Commentor")
                        .WithMany("LeftComments")
                        .HasForeignKey("CommentorId");

                    b.HasOne("BookSender.Models.User", "User")
                        .WithMany("ReviewsAsCommentor")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BookSender.Models.User", b =>
                {
                    b.HasOne("BookSender.Models.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");

                    b.HasOne("BookSender.Models.RatingStatus", "RatingStatus")
                        .WithMany()
                        .HasForeignKey("RatingStatusId");

                    b.HasOne("BookSender.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });
#pragma warning restore 612, 618
        }
    }
}
